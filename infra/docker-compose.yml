version: "3.9"

services:
  postgres:
    image: postgres:16
    env_file: ../.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["core"]

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["core"]

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    env_file: ../.env
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    profiles: ["core"]

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    profiles: ["core"]

  searxng:
    image: searxng/searxng:latest
    ports:
      - "8080:8080"
    volumes:
      - ./searxng/settings.yml:/etc/searxng/settings.yml:ro
    restart: unless-stopped
    profiles: ["discovery"]
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/ || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5

  rsshub:
    image: diygod/rsshub:latest
    ports:
      - "1200:1200"
    restart: unless-stopped
    profiles: ["discovery"]

  api:
    build:
      context: ../apps/api
      dockerfile: Dockerfile
    env_file: ../.env
    environment:
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      qdrant:
        condition: service_started
    working_dir: /app
    volumes:
      - ..:/app
    ports:
      - "8000:8000"
    command: ["sh", "-lc", "cd apps/api && exec uvicorn main:app --host 0.0.0.0 --port 8000"]
    restart: unless-stopped
    profiles: ["core"]

  worker:
    build:
      context: ../apps/worker
      dockerfile: Dockerfile
    env_file: ../.env
    environment:
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /app
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      searxng:
        condition: service_healthy
      rsshub:
        condition: service_started
    working_dir: /app
    volumes:
      - ..:/app
      - hf_cache:/root/.cache/huggingface
    command: ["celery", "-A", "apps.worker.worker.celery_app", "worker", "--loglevel=INFO", "--concurrency=2", "--prefetch-multiplier=1", "-Ofair", "-Q", "default"]
    restart: unless-stopped
    runtime: nvidia
    profiles: ["core"]

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]
    # If your Docker/Compose supports it, you can also use:
    # gpus: all
    profiles: ["ai"]

volumes:
  postgres_data:
  redis_data:
  minio_data:
  qdrant_data:
  ollama_data:
  hf_cache:
